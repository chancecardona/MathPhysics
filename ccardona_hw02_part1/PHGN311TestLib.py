#*****************************************************************************
# DO NOT EDIT THIS FILE
#*****************************************************************************

from colorama import Fore, Back, Style, init
from inspect import signature
from multiprocessing import Pool, TimeoutError

init()

def ASSERT_EQUALS_IrI(I, E, F, T):
    if len(signature(F).parameters) == 0:
        print("\033[1;31m[FAILED] \033[33m\tNO INPUT ARGUMENT\033[0m")
        return -1
    elif len(signature(F).parameters) > 1:
        print("\033[1;31m[FAILED] \033[33m\tTOO MANY ARGUMENTS\033[0m")
        return -1
    pool = Pool(1)
    res = pool.apply_async(F, (I,))
    pool.close()
    try:
        R = res.get(T)
    except TimeoutError:
        print("\033[1;31m[FAILED] \033[33m\tFUNCTION TIMEOUT\t\t\033[37mINPUT:%10d\033[0m" % I)
        pool.terminate()
        return -1
    if (R == E):
        print("\033[1;32m[PASSED] \033[37mINPUT:%10d\033[32m\tRETURNED:\033[37m%15d\033[0m" % (I, E))
    elif (R == None):
        print("\033[1;31m[FAILED] \033[37mINPUT:%10d\033[33m\t\tEXPECTED:\033[37m%15d\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, "NONE TYPE"))
    else:
        print("\033[1;31m[FAILED] \033[37mINPUT:%10d\t\033[33m\t\tEXPECTED:\033[37m%15d\t\033[33mRETURNED:\033[37m%15d\033[0m" % (I, E, R))

def ASSERT_EQUALS_IrS(I, E, F):
    if len(signature(F).parameters) == 0:
        print("\033[1;31m[FAILED] \033[33m\tNO INPUT ARGUMENT\033[0m")
        return -1
    elif len(signature(F).parameters) > 1:
        print("\033[1;31m[FAILED] \033[33m\tTOO MANY ARGUMENTS\033[0m")
        return -1
    pool = Pool(1)
    res = pool.apply_async(F, (I,))
    pool.close()
    try:
        R = res.get(30)
    except TimeoutError:
        print("\033[1;31m[FAILED] \033[33m\tFUNCTION TIMEOUT\033[0m")
        pool.terminate()
        return -1
    if (R == E):
        print("\033[1;32m[PASSED] \033[37mINPUT:%10d\033[32m\tRETURNED:\033[37m%15s\033[0m" % (I, E))
    elif (R == None):
        print("\033[1;31m[FAILED] \033[37mINPUT:%10d\033[33m\t\tEXPECTED:\033[37m%15s\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, "NONE TYPE"))
    else:
        print("\033[1;31m[FAILED] \033[37mINPUT:%10d\t\033[33m\t\tEXPECTED:\033[37m%15s\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, R))

def ASSERT_EQUALS_SrI(I, E, F):
    if len(signature(F).parameters) == 0:
        print("\033[1;31m[FAILED] \033[33m\tNO INPUT ARGUMENT\033[0m")
        return -1
    elif len(signature(F).parameters) > 1:
        print("\033[1;31m[FAILED] \033[33m\tTOO MANY ARGUMENTS\033[0m")
        return -1
    pool = Pool(1)
    res = pool.apply_async(F, (I,))
    pool.close()
    try:
        R = res.get(30)
    except TimeoutError:
        print("\033[1;31m[FAILED] \033[33m\tFUNCTION TIMEOUT\033[0m")
        pool.terminate()
        return -1
    if (R == E):
        print("\033[1;32m[PASSED] \033[37mINPUT:%25s\033[32m\tRETURNED:\033[37m%15d\033[0m" % (I, E))
    elif (R == None):
        print("\033[1;31m[FAILED] \033[37mINPUT:%25s\033[33m\tEXPECTED:\033[37m%15d\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, "NONE TYPE"))
    else:
        print("\033[1;31m[FAILED] \033[37mINPUT:%25s\t\033[33m\tEXPECTED:\033[37m%15d\t\033[33mRETURNED:\033[37m%15d\033[0m" % (I, E, R))

def ASSERT_EQUALS_SrS(I, E, F):
    if len(signature(F).parameters) == 0:
        print("\033[1;31m[FAILED] \033[33m\tNO INPUT ARGUMENT\033[0m")
        return -1
    elif len(signature(F).parameters) > 1:
        print("\033[1;31m[FAILED] \033[33m\tTOO MANY ARGUMENTS\033[0m")
        return -1
    pool = Pool(1)
    res = pool.apply_async(F, (I,))
    pool.close()
    try:
        R = res.get(30)
    except TimeoutError:
        print("\033[1;31m[FAILED] \033[33m\tFUNCTION TIMEOUT\033[0m")
        pool.terminate()
        return -1
    if (R == E):
        print("\033[1;32m[PASSED] \033[37mINPUT:%25s\033[32m\tRETURNED:\033[37m%15d\033[0m" % (I, E))
    elif (R == None):
        print("\033[1;31m[FAILED] \033[37mINPUT:%25s\033[33m\tEXPECTED:\033[37m%15s\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, "NONE TYPE"))
    else:
        print("\033[1;31m[FAILED] \033[37mINPUT:%25s\t\033[33m\tEXPECTED:\033[37m%15s\t\033[33mRETURNED:\033[37m%15s\033[0m" % (I, E, R))
